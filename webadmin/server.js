const express = require('express');
const session = require('express-session');
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt');
const path = require('path');
const fs = require('fs');
const { exec } = require('child_process');
const util = require('util');
const archiver = require('archiver');
const AdmZip = require('adm-zip');
const multer = require('multer');
const https = require('https');
const execPromise = util.promisify(exec);
const SyncScheduler = require('./sync-scheduler');

const app = express();
const PORT = 8881;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const syncScheduler = new SyncScheduler();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const upload = multer({
    dest: '/tmp/',
    limits: { fileSize: 500 * 1024 * 1024 } // 500MB –ª–∏–º–∏—Ç
});

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏
const DATA_DIR = "/data";

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
const USER_DATA_FILE = path.join(DATA_DIR, 'user.json');
const ITEMS_DATA_FILE = path.join(DATA_DIR, 'items.json');

// –ü—É—Ç–∏ –¥–ª—è nginx –∫–æ–Ω—Ñ–∏–≥–æ–≤
const NGINX_CONFIG_DIR = '/nginx_config';
const NGINX_TEMPLATE_PATH = '/app/nginx/template.conf';
const NGINX_SSL_TEMPLATE_PATH = '/app/nginx/template_ssl.conf';

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ acme.sh
const ACME_DIR = '/acme.sh';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –¥–æ–º–µ–Ω–∞ –∏–∑ –ø–æ–¥–¥–æ–º–µ–Ω–∞
function getRootDomain(fullDomain) {
    const parts = fullDomain.split('.');
    if (parts.length >= 2) {
        return parts.slice(-2).join('.');
    }
    return fullDomain;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ CloudFlare API
function cloudflareRequest(method, path, token, data = null) {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: 'api.cloudflare.com',
            port: 443,
            path: path,
            method: method,
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        };

        if (data && (method === 'POST' || method === 'PUT')) {
            const postData = JSON.stringify(data);
            options.headers['Content-Length'] = Buffer.byteLength(postData);
        }

        const req = https.request(options, (res) => {
            let responseData = '';

            res.on('data', (chunk) => {
                responseData += chunk;
            });

            res.on('end', () => {
                try {
                    const parsedData = JSON.parse(responseData);
                    resolve(parsedData);
                } catch (error) {
                    reject(new Error('Failed to parse response: ' + responseData));
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (data && (method === 'POST' || method === 'PUT')) {
            req.write(JSON.stringify(data));
        }

        req.end();
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP —Å–µ—Ä–≤–µ—Ä–∞
async function getServerExternalIp() {
    return new Promise((resolve, reject) => {
        https.get('https://ifconfig.me/ip', (res) => {
            let data = '';

            res.on('data', (chunk) => {
                data += chunk;
            });

            res.on('end', () => {
                resolve(data.trim());
            });
        }).on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP:', error);
            reject(error);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Zone ID –∏–∑ CloudFlare
async function getCloudFlareZoneId(domain, token) {
    try {
        const response = await cloudflareRequest('GET', `/client/v4/zones?name=${domain}`, token);

        if (response.success && response.result && response.result.length > 0) {
            return response.result[0].id;
        }
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Zone ID:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è A-–∑–∞–ø–∏—Å–∏ –∏–∑ CloudFlare
async function getCloudFlareARecord(zoneId, recordName, token) {
    try {
        const response = await cloudflareRequest('GET', `/client/v4/zones/${zoneId}/dns_records?type=A&name=${recordName}`, token);

        if (response.success && response.result && response.result.length > 0) {
            return response.result[0];
        }
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è A-–∑–∞–ø–∏—Å–∏:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è A-–∑–∞–ø–∏—Å–∏ –≤ CloudFlare
async function createCloudFlareARecord(zoneId, subdomain, ip, token) {
    try {
        const data = {
            type: 'A',
            name: subdomain,
            content: ip,
            proxied: false
        };

        const response = await cloudflareRequest('POST', `/client/v4/zones/${zoneId}/dns_records`, token, data);
        return response;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è A-–∑–∞–ø–∏—Å–∏:', error);
        return { success: false, error: error.message };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è A-–∑–∞–ø–∏—Å–∏ –≤ CloudFlare
async function updateCloudFlareARecord(zoneId, recordId, subdomain, ip, token) {
    try {
        const data = {
            type: 'A',
            name: subdomain,
            content: ip,
            proxied: false
        };

        const response = await cloudflareRequest('PUT', `/client/v4/zones/${zoneId}/dns_records/${recordId}`, token, data);
        return response;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è A-–∑–∞–ø–∏—Å–∏:', error);
        return { success: false, error: error.message };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è A-–∑–∞–ø–∏—Å–∏ –∏–∑ CloudFlare
async function deleteCloudFlareARecord(zoneId, recordId, token) {
    try {
        const response = await cloudflareRequest('DELETE', `/client/v4/zones/${zoneId}/dns_records/${recordId}`, token);
        return response;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è A-–∑–∞–ø–∏—Å–∏:', error);
        return { success: false, error: error.message };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    try {
        if (fs.existsSync(USER_DATA_FILE)) {
            const data = fs.readFileSync(USER_DATA_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
    // –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
        username: 'admin',
        passwordHash: bcrypt.hashSync('password123', 10),
        cf_token: '',
        sync_interval: null // null = –æ—Ç–∫–ª—é—á–µ–Ω–æ, –∏–ª–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç: 30, 60, 720, 1440
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserData(userData) {
    try {
        fs.writeFileSync(USER_DATA_FILE, JSON.stringify(userData, null, 2), 'utf8');
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π
function loadItems() {
    try {
        if (fs.existsSync(ITEMS_DATA_FILE)) {
            const data = fs.readFileSync(ITEMS_DATA_FILE, 'utf8');
            const loadedData = JSON.parse(data);
            return {
                items: loadedData.items || [],
                counter: loadedData.counter || 1
            };
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π:', error);
    }
    return { items: [], counter: 1 };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
function saveItems() {
    try {
        const data = {
            items: items,
            counter: itemIdCounter
        };
        fs.writeFileSync(ITEMS_DATA_FILE, JSON.stringify(data, null, 2), 'utf8');
        console.log('‚úÖ –ó–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
function checkSslCertificate(domain) {
    try {
        const rootDomain = getRootDomain(domain);
        const certPaths = [
            path.join(ACME_DIR, `*.${rootDomain}_ecc`),
            path.join(ACME_DIR, `*.${rootDomain}`)
        ];

        for (const certPath of certPaths) {
            if (fs.existsSync(certPath)) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                const files = fs.readdirSync(certPath);
                const hasCert = files.some(f => f.endsWith('.cer') && !f.includes('ca.cer'));
                const hasKey = files.some(f => f.endsWith('.key'));
                const hasFullchain = files.some(f => f === 'fullchain.cer');

                if (hasCert && hasKey && hasFullchain) {
                    return {
                        exists: true,
                        path: certPath,
                        rootDomain: rootDomain
                    };
                }
            }
        }

        return {
            exists: false,
            rootDomain: rootDomain,
            message: `SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –¥–æ–º–µ–Ω–∞ *.${rootDomain} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é "üîê –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"`
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error);
        return {
            exists: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è nginx –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
function createNginxConfig(domain, dest, ssl = false) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ nginx_config
        if (!fs.existsSync(NGINX_CONFIG_DIR)) {
            fs.mkdirSync(NGINX_CONFIG_DIR, { recursive: true });
            console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è nginx –∫–æ–Ω—Ñ–∏–≥–æ–≤');
        }

        // –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç SSL
        const templatePath = ssl ? NGINX_SSL_TEMPLATE_PATH : NGINX_TEMPLATE_PATH;

        // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
        if (!fs.existsSync(templatePath)) {
            console.error('‚ùå –®–∞–±–ª–æ–Ω nginx –Ω–µ –Ω–∞–π–¥–µ–Ω:', templatePath);
            return { success: false, error: '–®–∞–±–ª–æ–Ω nginx –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        let template = fs.readFileSync(templatePath, 'utf8');

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–æ—Å—Ç –∏–∑ destination
        let newHost = dest;
        try {
            const url = new URL(dest);
            newHost = url.host; // host –≤–∫–ª—é—á–∞–µ—Ç hostname –∏ port (–Ω–∞–ø—Ä–∏–º–µ—Ä: 192.168.1.22:8123)
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ URL, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Ä—É—á–Ω—É—é
            newHost = dest.replace(/^https?:\/\//, '');
        }

        // –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        template = template.replace(/{host}/g, domain);
        template = template.replace(/{destination}/g, dest);
        template = template.replace(/{new_host}/g, newHost);

        // –î–ª—è SSL-—à–∞–±–ª–æ–Ω–∞ —Ç–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ–º {domain} –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–æ–º–µ–Ω
        if (ssl) {
            const rootDomain = getRootDomain(domain);
            template = template.replace(/{domain}/g, rootDomain);
            console.log(`üîê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SSL-—à–∞–±–ª–æ–Ω. –ö–æ—Ä–Ω–µ–≤–æ–π –¥–æ–º–µ–Ω: ${rootDomain}`);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        const configPath = path.join(NGINX_CONFIG_DIR, domain+'.conf');
        fs.writeFileSync(configPath, template, 'utf8');
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω nginx –∫–æ–Ω—Ñ–∏–≥: ${configPath}`);

        return {
            success: true,
            config: template,
            path: configPath
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ nginx –∫–æ–Ω—Ñ–∏–≥–∞:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è nginx –∫–æ–Ω—Ñ–∏–≥–∞
function deleteNginxConfig(domain) {
    try {
        const configPath = path.join(NGINX_CONFIG_DIR, domain+'.conf');
        if (fs.existsSync(configPath)) {
            fs.unlinkSync(configPath);
            console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω nginx –∫–æ–Ω—Ñ–∏–≥: ${configPath}`);
            return true;
        }
        return false;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ nginx –∫–æ–Ω—Ñ–∏–≥–∞:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx
async function testNginxConfig() {
    try {
        const { stdout, stderr } = await execPromise('docker exec nginx_webserver nginx -t 2>&1');
        console.log('‚úÖ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞');
        return { success: true, output: stdout + stderr };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx:', error.stdout + error.stderr);
        return {
            success: false,
            error: error.stdout + error.stderr,
            message: '–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx'
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ nginx
async function reloadNginx() {
    try {
        const { stdout, stderr } = await execPromise('docker exec nginx_webserver nginx -s reload 2>&1');
        console.log('üîÑ Nginx –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return { success: true, output: stdout + stderr };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ nginx:', error.stdout + error.stderr);
        return {
            success: false,
            error: error.stdout + error.stderr,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ nginx'
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π nginx (–ø—Ä–æ–≤–µ—Ä–∫–∞ + –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞)
async function applyNginxChanges() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const testResult = await testNginxConfig();
    if (!testResult.success) {
        return testResult;
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    return await reloadNginx();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
function copyFolderRecursiveSync(source, target) {
    if (!fs.existsSync(target)) {
        fs.mkdirSync(target, { recursive: true });
    }

    if (fs.lstatSync(source).isDirectory()) {
        const files = fs.readdirSync(source);
        files.forEach(file => {
            const curSource = path.join(source, file);
            const curTarget = path.join(target, file);

            if (fs.lstatSync(curSource).isDirectory()) {
                copyFolderRecursiveSync(curSource, curTarget);
            } else {
                fs.copyFileSync(curSource, curTarget);
            }
        });
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
let userData = loadUserData();
const itemsData = loadItems();
let items = itemsData.items;
let itemIdCounter = itemsData.counter;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ –±—ã–ª–æ
saveUserData(userData);
saveItems();

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(session({
    secret: 'your-secret-key-change-this',
    resave: false,
    saveUninitialized: false,
    cookie: { maxAge: 24 * 60 * 60 * 1000 }
}));

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function requireAuth(req, res, next) {
    if (req.session.authenticated) {
        next();
    } else {
        res.redirect('/login');
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', requireAuth, (req, res) => {
    const indexPath = path.join(__dirname, 'views', 'index.html');
    res.sendFile(indexPath);
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
app.get('/login', (req, res) => {
    if (req.session.authenticated) {
        return res.redirect('/');
    }
    const loginPath = path.join(__dirname, 'views', 'login.html');
    res.sendFile(loginPath);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    if (username === userData.username && await bcrypt.compare(password, userData.passwordHash)) {
        req.session.authenticated = true;
        res.json({ success: true });
    } else {
        res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }
});

// –í—ã—Ö–æ–¥
app.get('/logout', (req, res) => {
    req.session.destroy();
    res.redirect('/login');
});

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
app.get('/api/items', requireAuth, (req, res) => {
    res.json(items);
});

app.post('/api/items', requireAuth, async (req, res) => {
    const { domain, dest, item3, ssl, active, notes } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –µ—Å–ª–∏ SSL –≤–∫–ª—é—á–µ–Ω
    if (ssl) {
        const certCheck = checkSslCertificate(domain);
        if (!certCheck.exists) {
            return res.status(400).json({
                error: 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                details: certCheck.message || certCheck.error
            });
        }
    }

    const newItem = {
        id: itemIdCounter++,
        domain,
        dest,
        item3,
        ssl: ssl !== undefined ? ssl : false,
        active: active !== undefined ? active : true,
        notes: notes || ''
    };
    items.push(newItem);
    saveItems();

    // –°–æ–∑–¥–∞–µ–º nginx –∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞
    if (newItem.active) {
        const configResult = createNginxConfig(domain, dest, newItem.ssl);

        if (!configResult.success) {
            items.pop();
            itemIdCounter--;
            saveItems();
            return res.status(500).json({
                error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
                details: configResult.error
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
        const nginxResult = await applyNginxChanges();
        if (!nginxResult.success) {
            items.pop();
            itemIdCounter--;
            saveItems();
            deleteNginxConfig(domain);

            return res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx',
                details: nginxResult.error,
                config: configResult.config
            });
        }
    }

    res.json(newItem);
});

app.put('/api/items/:id', requireAuth, async (req, res) => {
    const id = parseInt(req.params.id);
    const { domain, dest, item3, ssl, active, notes } = req.body;
    const itemIndex = items.findIndex(item => item.id === id);

    if (itemIndex !== -1) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –µ—Å–ª–∏ SSL –≤–∫–ª—é—á–µ–Ω
        if (ssl) {
            const certCheck = checkSslCertificate(domain);
            if (!certCheck.exists) {
                return res.status(400).json({
                    error: 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    details: certCheck.message || certCheck.error
                });
            }
        }

        const oldItem = { ...items[itemIndex] };
        const oldDomain = items[itemIndex].domain;
        const oldActive = items[itemIndex].active;

        items[itemIndex] = {
            id,
            domain,
            dest,
            item3,
            ssl: ssl !== undefined ? ssl : items[itemIndex].ssl,
            active: active !== undefined ? active : items[itemIndex].active,
            notes: notes !== undefined ? notes : (items[itemIndex].notes || '')
        };
        saveItems();

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ –¥–æ–º–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (oldDomain !== domain) {
            deleteNginxConfig(oldDomain);
        }

        let configResult = { success: true, config: '' };

        // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ active
        if (items[itemIndex].active) {
            configResult = createNginxConfig(domain, dest, items[itemIndex].ssl);
            if (!configResult.success) {
                items[itemIndex] = oldItem;
                saveItems();
                if (oldDomain !== domain && oldActive) {
                    createNginxConfig(oldDomain, oldItem.dest, oldItem.ssl);
                }
                return res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
                    details: configResult.error
                });
            }
        } else {
            deleteNginxConfig(domain);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
        const nginxResult = await applyNginxChanges();
        if (!nginxResult.success) {
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            items[itemIndex] = oldItem;
            saveItems();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏
            if (oldDomain !== domain && oldActive) {
                createNginxConfig(oldDomain, oldItem.dest, oldItem.ssl);
            }
            if (oldActive) {
                createNginxConfig(oldDomain, oldItem.dest, oldItem.ssl);
            } else {
                deleteNginxConfig(domain);
            }

            return res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx',
                details: nginxResult.error,
                config: configResult.config
            });
        }

        res.json(items[itemIndex]);
    } else {
        res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
});

// Endpoint –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è SSL
app.patch('/api/items/:id/toggle-ssl', requireAuth, async (req, res) => {
    const id = parseInt(req.params.id);
    const { ssl } = req.body;
    const itemIndex = items.findIndex(item => item.id === id);

    if (itemIndex !== -1) {
        const domain = items[itemIndex].domain;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ SSL
        if (ssl) {
            const certCheck = checkSslCertificate(domain);
            if (!certCheck.exists) {
                return res.status(400).json({
                    error: 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    details: certCheck.message || certCheck.error,
                    certInfo: certCheck
                });
            }
        }

        const oldSsl = items[itemIndex].ssl;
        items[itemIndex].ssl = ssl;
        saveItems();

        let configResult = { success: true, config: '' };

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞
        if (items[itemIndex].active) {
            configResult = createNginxConfig(items[itemIndex].domain, items[itemIndex].dest, items[itemIndex].ssl);

            if (!configResult.success) {
                items[itemIndex].ssl = oldSsl;
                saveItems();
                return res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
                    details: configResult.error
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
            const nginxResult = await applyNginxChanges();
            if (!nginxResult.success) {
                // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
                items[itemIndex].ssl = oldSsl;
                saveItems();
                createNginxConfig(items[itemIndex].domain, items[itemIndex].dest, oldSsl);

                return res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx',
                    details: nginxResult.error,
                    config: configResult.config
                });
            }
        }

        res.json({
            success: true,
            ssl: items[itemIndex].ssl,
            config: configResult.config
        });
    } else {
        res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
});

// Endpoint –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
app.patch('/api/items/:id/toggle-active', requireAuth, async (req, res) => {
    const id = parseInt(req.params.id);
    const { active } = req.body;
    const itemIndex = items.findIndex(item => item.id === id);

    if (itemIndex !== -1) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ —Å SSL
        if (active && items[itemIndex].ssl) {
            const certCheck = checkSslCertificate(items[itemIndex].domain);
            if (!certCheck.exists) {
                return res.status(400).json({
                    error: 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    details: certCheck.message || certCheck.error,
                    certInfo: certCheck
                });
            }
        }

        const oldActive = items[itemIndex].active;
        items[itemIndex].active = active;
        saveItems();

        let configResult = { success: true, config: '' };

        // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if (active) {
            configResult = createNginxConfig(items[itemIndex].domain, items[itemIndex].dest, items[itemIndex].ssl);

            if (!configResult.success) {
                items[itemIndex].active = oldActive;
                saveItems();
                return res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
                    details: configResult.error
                });
            }
        } else {
            deleteNginxConfig(items[itemIndex].domain);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
        const nginxResult = await applyNginxChanges();
        if (!nginxResult.success) {
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            items[itemIndex].active = oldActive;
            saveItems();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            if (oldActive) {
                createNginxConfig(items[itemIndex].domain, items[itemIndex].dest, items[itemIndex].ssl);
            } else {
                deleteNginxConfig(items[itemIndex].domain);
            }

            return res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx',
                details: nginxResult.error,
                config: configResult.config
            });
        }

        res.json({
            success: true,
            active: items[itemIndex].active,
            config: configResult.config
        });
    } else {
        res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
});

app.delete('/api/items/:id', requireAuth, async (req, res) => {
    const id = parseInt(req.params.id);
    const itemIndex = items.findIndex(item => item.id === id);

    if (itemIndex !== -1) {
        const deletedItem = { ...items[itemIndex] };
        const domain = items[itemIndex].domain;
        items.splice(itemIndex, 1);
        saveItems();

        // –£–¥–∞–ª—è–µ–º nginx –∫–æ–Ω—Ñ–∏–≥
        deleteNginxConfig(domain);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
        const nginxResult = await applyNginxChanges();
        if (!nginxResult.success) {
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            items.splice(itemIndex, 0, deletedItem);
            saveItems();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
            if (deletedItem.active) {
                createNginxConfig(domain, deletedItem.dest, deletedItem.ssl);
            }

            return res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx',
                details: nginxResult.error
            });
        }

        res.json({ success: true });
    } else {
        res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
});

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
app.post('/api/change-password', requireAuth, async (req, res) => {
    const { currentPassword, newPassword } = req.body;

    if (await bcrypt.compare(currentPassword, userData.passwordHash)) {
        userData.passwordHash = await bcrypt.hash(newPassword, 10);
        saveUserData(userData);
        res.json({ success: true });
    } else {
        res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' });
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CloudFlare —Ç–æ–∫–µ–Ω–∞
app.post('/api/save-cf-token', requireAuth, async (req, res) => {
    const { cf_token } = req.body;

    if (!cf_token) {
        return res.status(400).json({ error: '–¢–æ–∫–µ–Ω CloudFlare –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    try {
        userData.cf_token = cf_token;
        saveUserData(userData);
        res.json({ success: true, message: '–¢–æ–∫–µ–Ω CloudFlare —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–∫–µ–Ω–∞ (–µ—Å—Ç—å –∏–ª–∏ –Ω–µ—Ç)
app.get('/api/cf-token-status', requireAuth, (req, res) => {
    res.json({
        hasToken: !!userData.cf_token,
        tokenPreview: userData.cf_token ? '***' + userData.cf_token.slice(-4) : null
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ ZIP
app.get('/api/export-settings', requireAuth, async (req, res) => {
    try {
        console.log('üì¶ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        const date = new Date().toISOString().split('T')[0];
        res.setHeader('Content-Type', 'application/zip');
        res.setHeader('Content-Disposition', `attachment; filename=settings-backup-${date}.zip`);

        // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä
        const archive = archiver('zip', {
            zlib: { level: 9 }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        archive.on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞:', err);
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞' });
        });

        // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Ç–æ–∫ –≤ response
        archive.pipe(res);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã JSON
        if (fs.existsSync(ITEMS_DATA_FILE)) {
            archive.file(ITEMS_DATA_FILE, { name: 'items.json' });
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω items.json');
        }

        if (fs.existsSync(USER_DATA_FILE)) {
            archive.file(USER_DATA_FILE, { name: 'user.json' });
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω user.json');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É acme.sh, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (fs.existsSync(ACME_DIR)) {
            archive.directory(ACME_DIR, 'acme.sh');
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ acme.sh');
        } else {
            console.log('‚ö†Ô∏è  –ü–∞–ø–∫–∞ acme.sh –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—Ä—Ö–∏–≤
        await archive.finalize();
        console.log('‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        if (!res.headersSent) {
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
        }
    }
});

function clearDir(dirPath) {
    if (!fs.existsSync(dirPath)) return;
    for (const entry of fs.readdirSync(dirPath)) {
        const entryPath = path.join(dirPath, entry);
        const stat = fs.lstatSync(entryPath);
        if (stat.isDirectory()) {
            fs.rmSync(entryPath, { recursive: true, force: true });
        } else {
            fs.unlinkSync(entryPath);
        }
    }
}

// –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ ZIP
app.post('/api/import-settings', requireAuth, upload.single('settings'), async (req, res) => {
    let tempDir = null;

    try {
        if (!req.file) {
            return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
        }

        console.log('üì• –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑:', req.file.path);

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        tempDir = path.join('/tmp', 'import_' + Date.now());
        fs.mkdirSync(tempDir, { recursive: true });

        // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º ZIP
        const zip = new AdmZip(req.file.path);
        zip.extractAllTo(tempDir, true);
        console.log('‚úÖ –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤:', tempDir);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º items.json
        const itemsPath = path.join(tempDir, 'items.json');
        if (fs.existsSync(itemsPath)) {
            fs.copyFileSync(itemsPath, ITEMS_DATA_FILE);
            console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω items.json');

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç—å
            const newItemsData = loadItems();
            items = newItemsData.items;
            itemIdCounter = newItemsData.counter;
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user.json
        const userPath = path.join(tempDir, 'user.json');
        if (fs.existsSync(userPath)) {
            fs.copyFileSync(userPath, USER_DATA_FILE);
            console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω user.json');

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userData = loadUserData();
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É acme.sh
        const acmeTempPath = path.join(tempDir, 'acme.sh');

        if (fs.existsSync(acmeTempPath)) {
            if (fs.existsSync(ACME_DIR)) {
                clearDir(ACME_DIR); // –æ—á–∏—â–∞–µ–º –ø–∞–ø–∫—É, –Ω–µ —É–¥–∞–ª—è—è –µ—ë
                console.log('üßπ –û—á–∏—â–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ acme.sh');
            }

            copyFolderRecursiveSync(acmeTempPath, ACME_DIR);
            console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ acme.sh');
        }

        console.log('üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ nginx –∫–æ–Ω—Ñ–∏–≥–æ–≤...');
        for (const item of items) {
            if (item.active) {
                createNginxConfig(item.domain, item.dest, item.ssl);
            }
        }

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
        await applyNginxChanges();

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        fs.unlinkSync(req.file.path);
        fs.rmSync(tempDir, { recursive: true, force: true });

        console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        res.json({
            success: true,
            message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);

        // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if (req.file && fs.existsSync(req.file.path)) {
            fs.unlinkSync(req.file.path);
        }
        if (tempDir && fs.existsSync(tempDir)) {
            fs.rmSync(tempDir, { recursive: true, force: true });
        }

        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            details: error.message
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
app.get('/api/ssl-certificates', requireAuth, async (req, res) => {
    try {
        const acmeDir = '/acme.sh';

        console.log('üîç –ü–æ–∏—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤:', acmeDir);

        if (!fs.existsSync(acmeDir)) {
            console.log('‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', acmeDir);
            return res.json({ certificates: [] });
        }

        const certificates = [];
        const items = fs.readdirSync(acmeDir);
        console.log('üìÇ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ:', items.length);

        for (const item of items) {
            const itemPath = path.join(acmeDir, item);
            const stats = fs.statSync(itemPath);

            if (!stats.isDirectory()) {
                continue;
            }

            let domain = null;
            let certDir = itemPath;

            if (item.endsWith('_ecc') && item.startsWith('*.')) {
                domain = item.replace('*.', '').replace('_ecc', '');
            } else if (item.startsWith('*.')) {
                domain = item.replace('*.', '');
            } else if (item.endsWith('_ecc')) {
                domain = item.replace('_ecc', '');
            } else if (!item.includes('_') && item.includes('.')) {
                domain = item;
            }

            if (!domain) {
                continue;
            }

            try {
                const certFiles = fs.readdirSync(certDir);
                let certFile = null;

                for (const file of certFiles) {
                    if (file.endsWith('.cer') && !file.includes('ca.cer')) {
                        certFile = path.join(certDir, file);
                        break;
                    }
                }

                if (!certFile || !fs.existsSync(certFile)) {
                    continue;
                }

                const command = `docker exec acme_sh openssl x509 -enddate -noout -in "${certFile}"`;
                const { stdout } = await execPromise(command);

                const match = stdout.match(/notAfter=(.+)/);
                if (match) {
                    const expiryDate = new Date(match[1]);
                    const now = new Date();
                    const daysLeft = Math.ceil((expiryDate - now) / (1000 * 60 * 60 * 24));

                    certificates.push({
                        domain: domain,
                        expiryDate: expiryDate.toISOString(),
                        daysLeft: daysLeft,
                        path: certDir,
                        status: daysLeft > 30 ? 'valid' : daysLeft > 0 ? 'expiring' : 'expired'
                    });
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ${domain}:`, error.message);
            }
        }

        certificates.sort((a, b) => a.daysLeft - b.daysLeft);
        res.json({ certificates });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤',
            details: error.message
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —á–µ—Ä–µ–∑ Let's Encrypt —Å CloudFlare DNS
app.post('/api/get-ssl-certificate', requireAuth, async (req, res) => {
    const { domain } = req.body;

    if (!domain) {
        return res.status(400).json({ error: '–î–æ–º–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    if (!userData.cf_token) {
        return res.status(400).json({
            error: 'CloudFlare —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
            details: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ CloudFlare API —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'
        });
    }

    try {
        console.log('üîê –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —á–µ—Ä–µ–∑ CloudFlare...');
        console.log(`   –î–æ–º–µ–Ω: ${domain}`);

        const issueCommand = `docker exec -e CF_Token='${userData.cf_token}' acme_sh acme.sh --issue --dns dns_cf -d *.${domain} --server letsencrypt`;

        let issueResult;
        let alreadyExists = false;
        let renewalDate = '';

        try {
            issueResult = await execPromise(issueCommand);
            console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        } catch (error) {
            const errorOutput = error.stdout + error.stderr;

            if (errorOutput.includes('Domains not changed') &&
                errorOutput.includes('Skipping') &&
                errorOutput.includes('Next renewal time is')) {
                console.log('‚ÑπÔ∏è  –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
                alreadyExists = true;
                issueResult = { stdout: errorOutput, stderr: '' };

                const renewalMatch = errorOutput.match(/Next renewal time is: ([^\n]+)/);
                if (renewalMatch) {
                    renewalDate = renewalMatch[1];
                }
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', errorOutput);
                return res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞',
                    details: errorOutput,
                    step: 'certificate'
                });
            }
        }

        const certPath = `/acme.sh/*.${domain}_ecc`;
        const certFiles = {
            fullchain: `${certPath}/fullchain.cer`,
            key: `${certPath}/*.${domain}.key`,
            cert: `${certPath}/*.${domain}.cer`,
            ca: `${certPath}/ca.cer`
        };

        console.log('üìÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:', certPath);

        res.json({
            success: true,
            message: alreadyExists
                ? 'SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!'
                : 'SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!',
            alreadyExists: alreadyExists,
            renewalDate: renewalDate,
            domain: domain,
            certPath: certPath,
            certFiles: certFiles,
            output: issueResult.stdout + issueResult.stderr
        });

    } catch (error) {
        console.error('‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        res.status(500).json({
            error: '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞',
            details: error.message
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/server-external-ip', requireAuth, async (req, res) => {
    try {
        const ip = await getServerExternalIp();
        if (ip) {
            res.json({ success: true, ip });
        } else {
            res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP' });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP', details: error.message });
    }
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è DNS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ item
app.post('/api/items/:id/sync-dns', requireAuth, async (req, res) => {
    const id = parseInt(req.params.id);
    const itemIndex = items.findIndex(item => item.id === id);

    if (itemIndex === -1) {
        return res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    if (!userData.cf_token) {
        return res.status(400).json({ error: 'CloudFlare —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    try {
        const item = items[itemIndex];
        const rootDomain = getRootDomain(item.domain);
        const zoneId = await getCloudFlareZoneId(rootDomain, userData.cf_token);

        if (!zoneId) {
            return res.status(404).json({ error: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CloudFlare' });
        }

        const record = await getCloudFlareARecord(zoneId, item.domain, userData.cf_token);
        const serverIp = await getServerExternalIp();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        items[itemIndex].cf_ip = record ? record.content : null;
        items[itemIndex].cf_record_id = record ? record.id : null;
        items[itemIndex].cf_zone_id = zoneId;
        items[itemIndex].cf_last_sync = new Date().toISOString();
        items[itemIndex].server_ip = serverIp;

        saveItems();

        res.json({
            success: true,
            exists: !!record,
            record: record ? {
                id: record.id,
                name: record.name,
                content: record.content,
                ttl: record.ttl,
                proxied: record.proxied
            } : null,
            serverIp,
            ipMatch: record ? record.content === serverIp : null,
            zoneId
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DNS:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DNS', details: error.message });
    }
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è DNS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö items
app.post('/api/sync-all-dns', requireAuth, async (req, res) => {
    if (!userData.cf_token) {
        return res.status(400).json({ error: 'CloudFlare —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    try {
        const serverIp = await getServerExternalIp();
        const results = [];

        for (let i = 0; i < items.length; i++) {
            try {
                const item = items[i];
                const rootDomain = getRootDomain(item.domain);
                const zoneId = await getCloudFlareZoneId(rootDomain, userData.cf_token);

                if (zoneId) {
                    const record = await getCloudFlareARecord(zoneId, item.domain, userData.cf_token);

                    items[i].cf_ip = record ? record.content : null;
                    items[i].cf_record_id = record ? record.id : null;
                    items[i].cf_zone_id = zoneId;
                    items[i].cf_last_sync = new Date().toISOString();
                    items[i].server_ip = serverIp;

                    results.push({
                        id: item.id,
                        domain: item.domain,
                        success: true,
                        exists: !!record
                    });
                } else {
                    results.push({
                        id: item.id,
                        domain: item.domain,
                        success: false,
                        error: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CloudFlare'
                    });
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DNS –¥–ª—è ${items[i].domain}:`, error);
                results.push({
                    id: items[i].id,
                    domain: items[i].domain,
                    success: false,
                    error: error.message
                });
            }
        }

        saveItems();

        res.json({
            success: true,
            serverIp,
            results
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö DNS:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DNS', details: error.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ DNS –∑–∞–ø–∏—Å–∏ –∏–∑ CloudFlare
app.post('/api/cloudflare/get-dns-info', requireAuth, async (req, res) => {
    const { domain } = req.body;

    if (!domain) {
        return res.status(400).json({ error: '–î–æ–º–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    if (!userData.cf_token) {
        return res.status(400).json({ error: 'CloudFlare —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    try {
        const rootDomain = getRootDomain(domain);
        const zoneId = await getCloudFlareZoneId(rootDomain, userData.cf_token);

        if (!zoneId) {
            return res.status(404).json({ error: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CloudFlare' });
        }

        const record = await getCloudFlareARecord(zoneId, domain, userData.cf_token);
        const serverIp = await getServerExternalIp();

        res.json({
            success: true,
            exists: !!record,
            record: record ? {
                id: record.id,
                name: record.name,
                content: record.content,
                ttl: record.ttl,
                proxied: record.proxied
            } : null,
            serverIp,
            ipMatch: record ? record.content === serverIp : null,
            zoneId
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DNS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DNS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', details: error.message });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ DNS –∑–∞–ø–∏—Å–∏ –≤ CloudFlare
app.post('/api/cloudflare/create-dns', requireAuth, async (req, res) => {
    const { domain, itemId } = req.body;

    if (!domain) {
        return res.status(400).json({ error: '–î–æ–º–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    if (!userData.cf_token) {
        return res.status(400).json({ error: 'CloudFlare —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    try {
        const rootDomain = getRootDomain(domain);
        const zoneId = await getCloudFlareZoneId(rootDomain, userData.cf_token);

        if (!zoneId) {
            return res.status(404).json({ error: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CloudFlare' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        const existingRecord = await getCloudFlareARecord(zoneId, domain, userData.cf_token);
        if (existingRecord) {
            return res.status(400).json({ error: 'DNS –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        const serverIp = await getServerExternalIp();
        if (!serverIp) {
            return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP —Å–µ—Ä–≤–µ—Ä–∞' });
        }

        const response = await createCloudFlareARecord(zoneId, domain, serverIp, userData.cf_token);

        if (response.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –≤ items
            if (itemId) {
                const itemIndex = items.findIndex(item => item.id === parseInt(itemId));
                if (itemIndex !== -1) {
                    items[itemIndex].cf_ip = response.result.content;
                    items[itemIndex].cf_record_id = response.result.id;
                    items[itemIndex].cf_zone_id = zoneId;
                    items[itemIndex].cf_last_sync = new Date().toISOString();
                    items[itemIndex].server_ip = serverIp;
                    saveItems();
                }
            }

            res.json({
                success: true,
                message: 'DNS –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
                record: {
                    id: response.result.id,
                    name: response.result.name,
                    content: response.result.content,
                    ttl: response.result.ttl,
                    proxied: response.result.proxied
                }
            });
        } else {
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DNS –∑–∞–ø–∏—Å–∏',
                details: response.errors ? JSON.stringify(response.errors) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DNS –∑–∞–ø–∏—Å–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DNS –∑–∞–ø–∏—Å–∏', details: error.message });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å–∏ –≤ CloudFlare
app.post('/api/cloudflare/update-dns', requireAuth, async (req, res) => {
    const { domain, itemId } = req.body;

    if (!domain) {
        return res.status(400).json({ error: '–î–æ–º–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    if (!userData.cf_token) {
        return res.status(400).json({ error: 'CloudFlare —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    try {
        const rootDomain = getRootDomain(domain);
        const zoneId = await getCloudFlareZoneId(rootDomain, userData.cf_token);

        if (!zoneId) {
            return res.status(404).json({ error: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CloudFlare' });
        }

        const existingRecord = await getCloudFlareARecord(zoneId, domain, userData.cf_token);
        if (!existingRecord) {
            return res.status(404).json({ error: 'DNS –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        const serverIp = await getServerExternalIp();
        if (!serverIp) {
            return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP —Å–µ—Ä–≤–µ—Ä–∞' });
        }

        const response = await updateCloudFlareARecord(
            zoneId,
            existingRecord.id,
            domain,
            serverIp,
            userData.cf_token
        );

        if (response.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –≤ items
            if (itemId) {
                const itemIndex = items.findIndex(item => item.id === parseInt(itemId));
                if (itemIndex !== -1) {
                    items[itemIndex].cf_ip = response.result.content;
                    items[itemIndex].cf_record_id = response.result.id;
                    items[itemIndex].cf_zone_id = zoneId;
                    items[itemIndex].cf_last_sync = new Date().toISOString();
                    items[itemIndex].server_ip = serverIp;
                    saveItems();
                }
            }

            res.json({
                success: true,
                message: 'DNS –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
                record: {
                    id: response.result.id,
                    name: response.result.name,
                    content: response.result.content,
                    ttl: response.result.ttl,
                    proxied: response.result.proxied
                }
            });
        } else {
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DNS –∑–∞–ø–∏—Å–∏',
                details: response.errors ? JSON.stringify(response.errors) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DNS –∑–∞–ø–∏—Å–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DNS –∑–∞–ø–∏—Å–∏', details: error.message });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å–∏ –∏–∑ CloudFlare
app.post('/api/cloudflare/delete-dns', requireAuth, async (req, res) => {
    const { domain, itemId } = req.body;

    if (!domain) {
        return res.status(400).json({ error: '–î–æ–º–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    if (!userData.cf_token) {
        return res.status(400).json({ error: 'CloudFlare —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    try {
        const rootDomain = getRootDomain(domain);
        const zoneId = await getCloudFlareZoneId(rootDomain, userData.cf_token);

        if (!zoneId) {
            return res.status(404).json({ error: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CloudFlare' });
        }

        const existingRecord = await getCloudFlareARecord(zoneId, domain, userData.cf_token);
        if (!existingRecord) {
            return res.status(404).json({ error: 'DNS –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        const response = await deleteCloudFlareARecord(zoneId, existingRecord.id, userData.cf_token);

        if (response.success) {
            // –û—á–∏—â–∞–µ–º –∫–µ—à –≤ items
            if (itemId) {
                const itemIndex = items.findIndex(item => item.id === parseInt(itemId));
                if (itemIndex !== -1) {
                    items[itemIndex].cf_ip = null;
                    items[itemIndex].cf_record_id = null;
                    items[itemIndex].cf_zone_id = zoneId;
                    items[itemIndex].cf_last_sync = new Date().toISOString();
                    saveItems();
                }
            }

            res.json({
                success: true,
                message: 'DNS –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
            });
        } else {
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è DNS –∑–∞–ø–∏—Å–∏',
                details: response.errors ? JSON.stringify(response.errors) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è DNS –∑–∞–ø–∏—Å–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è DNS –∑–∞–ø–∏—Å–∏', details: error.message });
    }
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è DNS –∑–∞–ø–∏—Å–µ–π
async function autoSyncAllDns() {
    console.log('\nü§ñ –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DNS...');

    if (!userData.cf_token) {
        console.error('‚ùå CloudFlare —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return {
            success: false,
            updated: 0,
            errors: 1,
            details: [{ error: true, message: 'CloudFlare —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }]
        };
    }

    try {
        const serverIp = await getServerExternalIp();
        if (!serverIp) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP —Å–µ—Ä–≤–µ—Ä–∞');
            return {
                success: false,
                updated: 0,
                errors: 1,
                details: [{ error: true, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP —Å–µ—Ä–≤–µ—Ä–∞' }]
            };
        }

        console.log(`üì° –í–Ω–µ—à–Ω–∏–π IP —Å–µ—Ä–≤–µ—Ä–∞: ${serverIp}`);

        let updatedCount = 0;
        let errorCount = 0;
        const details = [];

        for (let i = 0; i < items.length; i++) {
            try {
                const item = items[i];

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                if (!item.active) {
                    continue;
                }

                const rootDomain = getRootDomain(item.domain);
                const zoneId = await getCloudFlareZoneId(rootDomain, userData.cf_token);

                if (!zoneId) {
                    console.log(`‚ö†Ô∏è  ${item.domain}: –¥–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CloudFlare`);
                    details.push({
                        domain: item.domain,
                        error: true,
                        message: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CloudFlare'
                    });
                    errorCount++;
                    continue;
                }

                const record = await getCloudFlareARecord(zoneId, item.domain, userData.cf_token);

                if (!record) {
                    console.log(`‚ö†Ô∏è  ${item.domain}: DNS –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                    details.push({
                        domain: item.domain,
                        error: false,
                        message: 'DNS –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                    });

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                    items[i].cf_ip = null;
                    items[i].cf_record_id = null;
                    items[i].cf_zone_id = zoneId;
                    items[i].cf_last_sync = new Date().toISOString();
                    items[i].server_ip = serverIp;
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ IP
                const currentIp = record.content;

                if (currentIp === serverIp) {
                    console.log(`‚úÖ ${item.domain}: IP —Å–æ–≤–ø–∞–¥–∞–µ—Ç (${currentIp})`);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                    items[i].cf_ip = currentIp;
                    items[i].cf_record_id = record.id;
                    items[i].cf_zone_id = zoneId;
                    items[i].cf_last_sync = new Date().toISOString();
                    items[i].server_ip = serverIp;

                    details.push({
                        domain: item.domain,
                        error: false,
                        updated: false,
                        message: `IP —Å–æ–≤–ø–∞–¥–∞–µ—Ç (${currentIp})`
                    });
                } else {
                    console.log(`üîÑ ${item.domain}: IP –∏–∑–º–µ–Ω–∏–ª—Å—è ${currentIp} ‚Üí ${serverIp}, –æ–±–Ω–æ–≤–ª—è–µ–º...`);

                    // –û–±–Ω–æ–≤–ª—è–µ–º DNS –∑–∞–ø–∏—Å—å
                    const updateResponse = await updateCloudFlareARecord(
                        zoneId,
                        record.id,
                        item.domain,
                        serverIp,
                        userData.cf_token
                    );

                    if (updateResponse.success) {
                        console.log(`‚úÖ ${item.domain}: DNS —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                        items[i].cf_ip = serverIp;
                        items[i].cf_record_id = record.id;
                        items[i].cf_zone_id = zoneId;
                        items[i].cf_last_sync = new Date().toISOString();
                        items[i].server_ip = serverIp;

                        updatedCount++;
                        details.push({
                            domain: item.domain,
                            error: false,
                            updated: true,
                            message: `IP –æ–±–Ω–æ–≤–ª–µ–Ω: ${currentIp} ‚Üí ${serverIp}`
                        });
                    } else {
                        console.error(`‚ùå ${item.domain}: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DNS`);
                        errorCount++;
                        details.push({
                            domain: item.domain,
                            error: true,
                            message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DNS'
                        });
                    }
                }

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${items[i].domain}:`, error.message);
                errorCount++;
                details.push({
                    domain: items[i].domain,
                    error: true,
                    message: error.message
                });
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        saveItems();

        console.log(`\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
        console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updatedCount}`);
        console.log(`   –û—à–∏–±–æ–∫: ${errorCount}`);

        return {
            success: true,
            updated: updatedCount,
            errors: errorCount,
            serverIp,
            details
        };

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        return {
            success: false,
            updated: 0,
            errors: 1,
            details: [{ error: true, message: error.message }]
        };
    }
}

// ============================================================================
// API ENDPOINTS –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ï–ô
// ============================================================================

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
app.get('/api/sync-settings', requireAuth, (req, res) => {
    const status = syncScheduler.getStatus();

    res.json({
        sync_interval: userData.sync_interval || null,
        scheduler_running: status.isRunning,
        last_sync: status.lastSyncTime,
        recent_history: status.recentHistory
    });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
app.post('/api/sync-settings', requireAuth, async (req, res) => {
    const { sync_interval } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
    const validIntervals = [null, 30, 60, 720, 1440];
    if (!validIntervals.includes(sync_interval)) {
        return res.status(400).json({
            error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
            validValues: validIntervals
        });
    }

    try {
        userData.sync_interval = sync_interval;
        saveUserData(userData);

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        if (sync_interval && userData.cf_token) {
            syncScheduler.start(sync_interval, autoSyncAllDns, { userData, items });
            console.log(`üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${sync_interval} –º–∏–Ω—É—Ç`);
        } else {
            syncScheduler.stop();
            console.log('‚èπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        res.json({
            success: true,
            message: sync_interval
                ? `–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ ${sync_interval} –º–∏–Ω—É—Ç)`
                : '–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞',
            sync_interval: sync_interval
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', details: error.message });
    }
});

// –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
app.post('/api/manual-sync', requireAuth, async (req, res) => {
    if (!userData.cf_token) {
        return res.status(400).json({ error: 'CloudFlare —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    try {
        const result = await autoSyncAllDns();

        res.json({
            success: true,
            message: '–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            ...result
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', details: error.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π
app.get('/api/sync-history', requireAuth, (req, res) => {
    const limit = parseInt(req.query.limit) || 50;
    const history = syncScheduler.getHistory(limit);

    res.json({
        history,
        total: history.length
    });
});

// –û—á–∏—Å—Ç–∫–∞ CloudFlare —Ç–æ–∫–µ–Ω–∞
app.post('/api/clear-cf-token', requireAuth, async (req, res) => {
    try {
        userData.cf_token = '';
        saveUserData(userData);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
        syncScheduler.stop();
        console.log('‚èπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');

        res.json({
            success: true,
            message: 'CloudFlare —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞', details: error.message });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìù –õ–æ–≥–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin`);
    console.log(`üîë –ü–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: password123`);
    console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª—ã:`);
    console.log(`   - ${USER_DATA_FILE}`);
    console.log(`   - ${ITEMS_DATA_FILE}`);
    console.log(`üìÅ Nginx –∫–æ–Ω—Ñ–∏–≥–∏: ${NGINX_CONFIG_DIR}`);
    console.log(`üìÑ –®–∞–±–ª–æ–Ω nginx: ${NGINX_TEMPLATE_PATH}`);
    console.log(`üîê –®–∞–±–ª–æ–Ω nginx SSL: ${NGINX_SSL_TEMPLATE_PATH}`);
    console.log(`‚òÅÔ∏è  CloudFlare —Ç–æ–∫–µ–Ω: ${userData.cf_token ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    if (userData.sync_interval && userData.cf_token) {
        console.log(`\nüîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DNS...`);
        console.log(`‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${userData.sync_interval} –º–∏–Ω—É—Ç`);
        syncScheduler.start(userData.sync_interval, autoSyncAllDns, { userData, items });
    } else {
        console.log(`\n‚è∏Ô∏è  –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è DNS –æ—Ç–∫–ª—é—á–µ–Ω–∞`);
        if (!userData.cf_token) {
            console.log(`   –ü—Ä–∏—á–∏–Ω–∞: CloudFlare —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
        } else {
            console.log(`   –ü—Ä–∏—á–∏–Ω–∞: –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        }
    }
});
