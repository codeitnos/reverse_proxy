const express = require('express');
const session = require('express-session');
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt');
const path = require('path');
const fs = require('fs');
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

const app = express();
const PORT = 8881;

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏
// const DATA_DIR = path.join(__dirname, '/data');
const DATA_DIR = "/data";

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
const USER_DATA_FILE = path.join(DATA_DIR, 'user.json');
const ITEMS_DATA_FILE = path.join(DATA_DIR, 'items.json');

// –ü—É—Ç–∏ –¥–ª—è nginx –∫–æ–Ω—Ñ–∏–≥–æ–≤
const NGINX_CONFIG_DIR = '/nginx_config';
const NGINX_TEMPLATE_PATH = '/app/nginx/template.conf';
const NGINX_SSL_TEMPLATE_PATH = '/app/nginx/template_ssl.conf';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –¥–æ–º–µ–Ω–∞ –∏–∑ –ø–æ–¥–¥–æ–º–µ–Ω–∞
function getRootDomain(fullDomain) {
    const parts = fullDomain.split('.');
    if (parts.length >= 2) {
        return parts.slice(-2).join('.');
    }
    return fullDomain;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    try {
        if (fs.existsSync(USER_DATA_FILE)) {
            const data = fs.readFileSync(USER_DATA_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
    // –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
        username: 'admin',
        passwordHash: bcrypt.hashSync('password123', 10)
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserData(userData) {
    try {
        fs.writeFileSync(USER_DATA_FILE, JSON.stringify(userData, null, 2), 'utf8');
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π
function loadItems() {
    try {
        if (fs.existsSync(ITEMS_DATA_FILE)) {
            const data = fs.readFileSync(ITEMS_DATA_FILE, 'utf8');
            const loadedData = JSON.parse(data);
            return {
                items: loadedData.items || [],
                counter: loadedData.counter || 1
            };
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π:', error);
    }
    return { items: [], counter: 1 };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
function saveItems() {
    try {
        const data = {
            items: items,
            counter: itemIdCounter
        };
        fs.writeFileSync(ITEMS_DATA_FILE, JSON.stringify(data, null, 2), 'utf8');
        console.log('‚úÖ –ó–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è nginx –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
function createNginxConfig(domain, dest, ssl = false) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ nginx_config
        if (!fs.existsSync(NGINX_CONFIG_DIR)) {
            fs.mkdirSync(NGINX_CONFIG_DIR, { recursive: true });
            console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è nginx –∫–æ–Ω—Ñ–∏–≥–æ–≤');
        }

        // –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç SSL
        const templatePath = ssl ? NGINX_SSL_TEMPLATE_PATH : NGINX_TEMPLATE_PATH;

        // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
        if (!fs.existsSync(templatePath)) {
            console.error('‚ùå –®–∞–±–ª–æ–Ω nginx –Ω–µ –Ω–∞–π–¥–µ–Ω:', templatePath);
            return false;
        }

        let template = fs.readFileSync(templatePath, 'utf8');

        // –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        template = template.replace(/{host}/g, domain);
        template = template.replace(/{destination}/g, dest);

        // –î–ª—è SSL-—à–∞–±–ª–æ–Ω–∞ —Ç–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ–º {domain} –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–æ–º–µ–Ω
        if (ssl) {
            const rootDomain = getRootDomain(domain);
            template = template.replace(/{domain}/g, rootDomain);
            console.log(`üîê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SSL-—à–∞–±–ª–æ–Ω. –ö–æ—Ä–Ω–µ–≤–æ–π –¥–æ–º–µ–Ω: ${rootDomain}`);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        const configPath = path.join(NGINX_CONFIG_DIR, domain+'.conf');
        fs.writeFileSync(configPath, template, 'utf8');
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω nginx –∫–æ–Ω—Ñ–∏–≥: ${configPath}`);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ nginx –∫–æ–Ω—Ñ–∏–≥–∞:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è nginx –∫–æ–Ω—Ñ–∏–≥–∞
function deleteNginxConfig(domain) {
    try {
        const configPath = path.join(NGINX_CONFIG_DIR, domain+'.conf');
        if (fs.existsSync(configPath)) {
            fs.unlinkSync(configPath);
            console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω nginx –∫–æ–Ω—Ñ–∏–≥: ${configPath}`);
            return true;
        }
        return false;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ nginx –∫–æ–Ω—Ñ–∏–≥–∞:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx
async function testNginxConfig() {
    try {
        const { stdout, stderr } = await execPromise('docker exec nginx_webserver nginx -t 2>&1');
        console.log('‚úÖ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞');
        return { success: true, output: stdout + stderr };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx:', error.stdout + error.stderr);
        return {
            success: false,
            error: error.stdout + error.stderr,
            message: '–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx'
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ nginx
async function reloadNginx() {
    try {
        const { stdout, stderr } = await execPromise('docker exec nginx_webserver nginx -s reload 2>&1');
        console.log('üîÑ Nginx –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return { success: true, output: stdout + stderr };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ nginx:', error.stdout + error.stderr);
        return {
            success: false,
            error: error.stdout + error.stderr,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ nginx'
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π nginx (–ø—Ä–æ–≤–µ—Ä–∫–∞ + –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞)
async function applyNginxChanges() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const testResult = await testNginxConfig();
    if (!testResult.success) {
        return testResult;
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    return await reloadNginx();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
let userData = loadUserData();
const itemsData = loadItems();
let items = itemsData.items;
let itemIdCounter = itemsData.counter;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ –±—ã–ª–æ
saveUserData(userData);
saveItems();

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(session({
    secret: 'your-secret-key-change-this',
    resave: false,
    saveUninitialized: false,
    cookie: { maxAge: 24 * 60 * 60 * 1000 }
}));

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function requireAuth(req, res, next) {
    if (req.session.authenticated) {
        next();
    } else {
        res.redirect('/login');
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', requireAuth, (req, res) => {
    const indexPath = path.join(__dirname, 'views', 'index.html');
    res.sendFile(indexPath);
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
app.get('/login', (req, res) => {
    if (req.session.authenticated) {
        return res.redirect('/');
    }
    const loginPath = path.join(__dirname, 'views', 'login.html');
    res.sendFile(loginPath);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    if (username === userData.username && await bcrypt.compare(password, userData.passwordHash)) {
        req.session.authenticated = true;
        res.json({ success: true });
    } else {
        res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }
});

// –í—ã—Ö–æ–¥
app.get('/logout', (req, res) => {
    req.session.destroy();
    res.redirect('/login');
});

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
app.get('/api/items', requireAuth, (req, res) => {
    res.json(items);
});

app.post('/api/items', requireAuth, async (req, res) => {
    const { domain, dest, item3, ssl, active } = req.body;
    const newItem = {
        id: itemIdCounter++,
        domain,
        dest,
        item3,
        ssl: ssl !== undefined ? ssl : false,
        active: active !== undefined ? active : true
    };
    items.push(newItem);
    saveItems(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª

    // –°–æ–∑–¥–∞–µ–º nginx –∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞
    if (newItem.active) {
        createNginxConfig(domain, dest, newItem.ssl);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
        const nginxResult = await applyNginxChanges();
        if (!nginxResult.success) {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            items.pop();
            itemIdCounter--;
            saveItems();
            deleteNginxConfig(domain);

            return res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx',
                details: nginxResult.error
            });
        }
    }

    res.json(newItem);
});

app.put('/api/items/:id', requireAuth, async (req, res) => {
    const id = parseInt(req.params.id);
    const { domain, dest, item3, ssl, active } = req.body;
    const itemIndex = items.findIndex(item => item.id === id);

    if (itemIndex !== -1) {
        const oldItem = { ...items[itemIndex] };
        const oldDomain = items[itemIndex].domain;
        const oldActive = items[itemIndex].active;

        items[itemIndex] = {
            id,
            domain,
            dest,
            item3,
            ssl: ssl !== undefined ? ssl : items[itemIndex].ssl,
            active: active !== undefined ? active : items[itemIndex].active
        };
        saveItems(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ –¥–æ–º–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (oldDomain !== domain) {
            deleteNginxConfig(oldDomain);
        }

        // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ active
        if (items[itemIndex].active) {
            createNginxConfig(domain, dest, items[itemIndex].ssl);
        } else {
            deleteNginxConfig(domain);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
        const nginxResult = await applyNginxChanges();
        if (!nginxResult.success) {
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            items[itemIndex] = oldItem;
            saveItems();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏
            if (oldDomain !== domain && oldActive) {
                createNginxConfig(oldDomain, oldItem.dest, oldItem.ssl);
            }
            if (oldActive) {
                createNginxConfig(oldDomain, oldItem.dest, oldItem.ssl);
            } else {
                deleteNginxConfig(domain);
            }

            return res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx',
                details: nginxResult.error
            });
        }

        res.json(items[itemIndex]);
    } else {
        res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
});

// Endpoint –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è SSL
app.patch('/api/items/:id/toggle-ssl', requireAuth, async (req, res) => {
    const id = parseInt(req.params.id);
    const { ssl } = req.body;
    const itemIndex = items.findIndex(item => item.id === id);

    if (itemIndex !== -1) {
        const oldSsl = items[itemIndex].ssl;
        items[itemIndex].ssl = ssl;
        saveItems(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞
        if (items[itemIndex].active) {
            createNginxConfig(items[itemIndex].domain, items[itemIndex].dest, items[itemIndex].ssl);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
            const nginxResult = await applyNginxChanges();
            if (!nginxResult.success) {
                // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
                items[itemIndex].ssl = oldSsl;
                saveItems();
                createNginxConfig(items[itemIndex].domain, items[itemIndex].dest, oldSsl);

                return res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx',
                    details: nginxResult.error
                });
            }
        }

        res.json({ success: true, ssl: items[itemIndex].ssl });
    } else {
        res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
});

// Endpoint –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
app.patch('/api/items/:id/toggle-active', requireAuth, async (req, res) => {
    const id = parseInt(req.params.id);
    const { active } = req.body;
    const itemIndex = items.findIndex(item => item.id === id);

    if (itemIndex !== -1) {
        const oldActive = items[itemIndex].active;
        items[itemIndex].active = active;
        saveItems(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª

        // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if (active) {
            createNginxConfig(items[itemIndex].domain, items[itemIndex].dest, items[itemIndex].ssl);
        } else {
            deleteNginxConfig(items[itemIndex].domain);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
        const nginxResult = await applyNginxChanges();
        if (!nginxResult.success) {
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            items[itemIndex].active = oldActive;
            saveItems();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            if (oldActive) {
                createNginxConfig(items[itemIndex].domain, items[itemIndex].dest, items[itemIndex].ssl);
            } else {
                deleteNginxConfig(items[itemIndex].domain);
            }

            return res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx',
                details: nginxResult.error
            });
        }

        res.json({ success: true, active: items[itemIndex].active });
    } else {
        res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
});

app.delete('/api/items/:id', requireAuth, async (req, res) => {
    const id = parseInt(req.params.id);
    const itemIndex = items.findIndex(item => item.id === id);

    if (itemIndex !== -1) {
        const deletedItem = { ...items[itemIndex] };
        const domain = items[itemIndex].domain;
        items.splice(itemIndex, 1);
        saveItems(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª

        // –£–¥–∞–ª—è–µ–º nginx –∫–æ–Ω—Ñ–∏–≥
        deleteNginxConfig(domain);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
        const nginxResult = await applyNginxChanges();
        if (!nginxResult.success) {
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            items.splice(itemIndex, 0, deletedItem);
            saveItems();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
            if (deletedItem.active) {
                createNginxConfig(domain, deletedItem.dest, deletedItem.ssl);
            }

            return res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx',
                details: nginxResult.error
            });
        }

        res.json({ success: true });
    } else {
        res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
});

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
app.post('/api/change-password', requireAuth, async (req, res) => {
    const { currentPassword, newPassword } = req.body;

    if (await bcrypt.compare(currentPassword, userData.passwordHash)) {
        userData.passwordHash = await bcrypt.hash(newPassword, 10);
        saveUserData(userData); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        res.json({ success: true });
    } else {
        res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —á–µ—Ä–µ–∑ Let's Encrypt
app.post('/api/get-ssl-certificate', requireAuth, async (req, res) => {
    const { domain, email, regru_username, regru_password } = req.body;

    if (!domain || !email || !regru_username || !regru_password) {
        return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    try {
        console.log('üîê –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...');
        console.log(`   –î–æ–º–µ–Ω: ${domain}`);
        console.log(`   Email: ${email}`);

        // –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        console.log('üìù –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Let\'s Encrypt...');
        const registerCommand = `docker exec -e REGRU_API_Username='${regru_username}' -e REGRU_API_Password='${regru_password}' acme_sh acme.sh --register-account -m ${email}`;

        let registerResult;
        try {
            registerResult = await execPromise(registerCommand);
            console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            const errorOutput = error.stdout + error.stderr;
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', errorOutput);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            if (errorOutput.includes('already registered') || errorOutput.includes('Account already exists')) {
                console.log('‚ÑπÔ∏è  –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
            } else {
                return res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Let\'s Encrypt',
                    details: errorOutput,
                    step: 'registration'
                });
            }
        }

        // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        console.log('üîí –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...');
        const issueCommand = `docker exec -e REGRU_API_Username='${regru_username}' -e REGRU_API_Password='${regru_password}' acme_sh acme.sh --issue --dns dns_regru -d '*.${domain}'  --server letsencrypt`;

        let issueResult;
        let alreadyExists = false;
        let renewalDate = '';

        try {
            issueResult = await execPromise(issueCommand);
            console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        } catch (error) {
            const errorOutput = error.stdout + error.stderr;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç
            if (errorOutput.includes('Domains not changed') &&
                errorOutput.includes('Skipping') &&
                errorOutput.includes('Next renewal time is')) {
                console.log('‚ÑπÔ∏è  –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
                alreadyExists = true;
                issueResult = { stdout: errorOutput, stderr: '' };

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                const renewalMatch = errorOutput.match(/Next renewal time is: ([^\n]+)/);
                if (renewalMatch) {
                    renewalDate = renewalMatch[1];
                }
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', errorOutput);
                return res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞',
                    details: errorOutput,
                    step: 'certificate'
                });
            }
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
        const certPath = `/acme.sh/*.${domain}_ecc`;
        const certFiles = {
            fullchain: `${certPath}/fullchain.cer`,
            key: `${certPath}/*.${domain}.key`,
            cert: `${certPath}/*.${domain}.cer`,
            ca: `${certPath}/ca.cer`
        };

        console.log('üìÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:', certPath);

        res.json({
            success: true,
            message: alreadyExists
                ? 'SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!'
                : 'SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!',
            alreadyExists: alreadyExists,
            renewalDate: renewalDate,
            domain: domain,
            certPath: certPath,
            certFiles: certFiles,
            output: issueResult.stdout + issueResult.stderr
        });

    } catch (error) {
        console.error('‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        res.status(500).json({
            error: '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞',
            details: error.message
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìù –õ–æ–≥–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin`);
    console.log(`üîë –ü–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: password123`);
    console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª—ã:`);
    console.log(`   - ${USER_DATA_FILE}`);
    console.log(`   - ${ITEMS_DATA_FILE}`);
    console.log(`üìÅ Nginx –∫–æ–Ω—Ñ–∏–≥–∏: ${NGINX_CONFIG_DIR}`);
    console.log(`üìÑ –®–∞–±–ª–æ–Ω nginx: ${NGINX_TEMPLATE_PATH}`);
    console.log(`üîê –®–∞–±–ª–æ–Ω nginx SSL: ${NGINX_SSL_TEMPLATE_PATH}`);
});
