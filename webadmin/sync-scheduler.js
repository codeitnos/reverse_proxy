/**
 * –ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DNS –∑–∞–ø–∏—Å–µ–π —Å CloudFlare
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP —Å–µ—Ä–≤–µ—Ä–∞ —Å IP –≤ DNS –∑–∞–ø–∏—Å—è—Ö
 * –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
 */

const https = require('https');

class SyncScheduler {
    constructor() {
        this.intervalId = null;
        this.isRunning = false;
        this.lastSyncTime = null;
        this.syncHistory = [];
        this.maxHistorySize = 100;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
     * @param {number} intervalMinutes - –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (30, 60, 720, 1440 –∏–ª–∏ null)
     * @param {Function} syncCallback - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
     */
    start(intervalMinutes, syncCallback, config) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –±—ã–ª –∑–∞–ø—É—â–µ–Ω
        this.stop();

        if (!intervalMinutes || intervalMinutes <= 0) {
            console.log('‚è∏Ô∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω');
            return;
        }

        const intervalMs = intervalMinutes * 60 * 1000;

        console.log(`üîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DNS`);
        console.log(`‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${intervalMinutes} –º–∏–Ω—É—Ç (${intervalMs}ms)`);

        this.isRunning = true;
        this.config = config;
        this.syncCallback = syncCallback;

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        this.intervalId = setInterval(async () => {
            await this.performSync();
        }, intervalMs);

        console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
     */
    stop() {
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
            this.isRunning = false;
            console.log('‚èπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    async performSync() {
        if (!this.config || !this.syncCallback) {
            console.error('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            return;
        }

        const startTime = new Date();
        console.log(`\nüîÑ [${startTime.toISOString()}] –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DNS...`);

        try {
            const result = await this.syncCallback();

            const endTime = new Date();
            const duration = endTime - startTime;

            const syncRecord = {
                timestamp: startTime.toISOString(),
                duration: duration,
                success: true,
                updated: result.updated || 0,
                errors: result.errors || 0,
                details: result.details || []
            };

            this.lastSyncTime = startTime;
            this.addToHistory(syncRecord);

            console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}ms`);
            console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.updated || 0}`);
            console.log(`   –û—à–∏–±–æ–∫: ${result.errors || 0}`);

            if (result.details && result.details.length > 0) {
                console.log('   –î–µ—Ç–∞–ª–∏:');
                result.details.forEach(detail => {
                    const status = detail.updated ? '‚úÖ' : (detail.error ? '‚ùå' : '‚ÑπÔ∏è');
                    console.log(`   ${status} ${detail.domain}: ${detail.message}`);
                });
            }

        } catch (error) {
            const endTime = new Date();
            const duration = endTime - startTime;

            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);

            const syncRecord = {
                timestamp: startTime.toISOString(),
                duration: duration,
                success: false,
                error: error.message
            };

            this.addToHistory(syncRecord);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π
     */
    addToHistory(record) {
        this.syncHistory.unshift(record);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (this.syncHistory.length > this.maxHistorySize) {
            this.syncHistory = this.syncHistory.slice(0, this.maxHistorySize);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
     */
    getStatus() {
        return {
            isRunning: this.isRunning,
            lastSyncTime: this.lastSyncTime ? this.lastSyncTime.toISOString() : null,
            historyCount: this.syncHistory.length,
            recentHistory: this.syncHistory.slice(0, 10) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π
     */
    getHistory(limit = 50) {
        return this.syncHistory.slice(0, limit);
    }
}

module.exports = SyncScheduler;
